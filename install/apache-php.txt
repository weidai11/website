This document details the Crypto++ webserver configuration for Apache and PHP.
The virtual machine is a Ubuntu 20 VM provided by IONOS (a.k.a. 1&1). The
webserver uses a LAMP stack with Apache, PHP and MySQL. The webserver also uses
Mediawiki software from the Mediawiki Foundation (and not the distro).

The following instructions install Apache and PHP and detail some of the
important settings for the webserver. After installing Apache and PHP we need
to install Mediawiki from sources using a Long Term Release version of the
Mediawiki software.

MySQL setup is available in install/mysql.txt.

Install Apache and PHP packages
===============================

  # apt-get install apache2 apache2-bin apache2-data apache2-utils \
    libapache2-mod-security2

  # apt-get install php7.4 php7.4-cli php7.4-common php7.4-gd php7.4-intl \
    php7.4-json php7.4-mbstring php7.4-mysql php7.4-opcache php7.4-readline \
    php7.4-xml php7.4-zip

  # apt-get install mysql-client-8.0 mysql-client-core-8.0 mysql-common \
    mysql-server-8.0 mysql-server-core-8.0

  # Other tools needed on occasion
  # apt-get install net-tools certbot git unzip

If OWASP CRS rules are installed, then remove them:

  # apt-get remove modsecurity-crs

Once installed the new gear is located in /bin, /etc and friends.

  $ ls /etc | grep -E 'apache|php|mysql'
  apache2
  mysql
  php

php.ini
=======

Change the various temp directories from /tmp to /var/lib/php/tmp.

  # grep '/tmp' /etc/php/7.4/apache2/php.ini
  sys_temp_dir = "/var/lib/php/tmp"
  soap.wsdl_cache_dir="/var/lib/php/tmp"
  opcache.lockfile_path=/var/lib/php/tmp

Ensure the directoru exists and is owned by www-data.

  mkdir -p /var/lib/php/tmp
  chown www-data:www-data /var/lib/php/tmp

security.ini
============

Crypto++ uses a hardened PHP configuration. Open /etc/php/7.4/apache2/php.ini,
and add the following to the tail:

  # tail -n 6 /etc/php/7.4/apache2/php.ini
  ;; Security hardening in security.ini
  log_errors = On
  display_errors = Off
  log_errors_max_len = 1024
  error_reporting = E_ALL & ~E_DEPRECATED & ~E_STRICT
  error_log = /var/log/apache2/error.log

Copy security.ini to /etc/php/7.4/apache2/conf.d/99-security.ini. Be sure to
rename it to 99-security.ini. The 99- ensures security.ini runs last to
override previous settings.

  $ find /etc -name 99-security.ini
  /etc/php/7.4/apache2/conf.d/99-security.ini

apache2.conf
============

Open /etc/apache2/apache2.conf and verify logging settings:

  ErrorLog ${APACHE_LOG_DIR}/error.log
  TransferLog ${APACHE_LOG_DIR}/access.log
  LogLevel warn

Ensure the following settings are set or add them if missing:

  ServerSignature Off
  ServerTokens Prod

Add the following to apache2.conf. It allows /var/www/html/.htaccess
to override configuration options.

  <Directory /var/www/html>
      Options Indexes FollowSymLinks
      AllowOverride FileInfo Options
      Require all granted
  </Directory>

MPM model
=========

Ensure prefork is used. We tried to cutover to mpm_event_module, but it is
incompatible with other components.

  # ls /etc/apache2/mods-enabled | grep prefork
  mpm_prefork.conf
  mpm_prefork.load

Enable mods
===========

Enable mod_ssl, mod_rewrite, mod_socache_shmcb and mod_security2.
mod_socache_shmcb is used for OCSP stapling. mod_security2 is used
for ModSecurity.

  a2enmod ssl
  a2enmod socache_shmcb
  a2enmod rewrite
  a2enmod security2

Inspect /etc/apache2/mods-enabled, and ensure there are no unneeded modules.
In particular, http2_module is not compatible with the mpm prefork module:

  # ls /etc/apache2/mods-enabled | grep http2
  #

mod_security
============

Find modsecurity.conf and verify SecRuleEngine is On:

  # SecRuleEngine DetectionOnly
  SecRuleEngine On

Find the PCRE limits and change them to:

  # https://github.com/SpiderLabs/owasp-modsecurity-crs/issues/656
  SecPcreMatchLimit 500000
  SecPcreMatchLimitRecursion 500000

Open security2.conf and disable the OWASP CRS rules.
Alternately, remove the package modsecurity-crs if present.

  # cat /etc/apache2/mods-enabled/security2.conf
  SecDataDir /var/cache/modsecurity
  IncludeOptional /etc/modsecurity/*.conf
  # IncludeOptional /usr/share/modsecurity-crs/*.load

cryptopp.conf
=============

Add a site at /etc/apache2/sites-available/cryptopp.conf.

  # cat /etc/apache2/sites-available/cryptopp.conf | grep -v '^[[:space:]]#'
  <VirtualHost *:80>

    ServerName cryptopp.com
    ServerAlias www.cryptopp.com *.cryptopp.com

    Redirect permanent / https://cryptopp.com/

    ServerAdmin webmaster@cryptopp.com
    DocumentRoot /var/www/html

    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined

  </VirtualHost>

  <VirtualHost *:443>

    SSLEngine on

    ServerName cryptopp.com
    ServerAlias www.cryptopp.com *.cryptopp.com

    ServerAdmin webmaster@cryptopp.com
    DocumentRoot /var/www/html

    ErrorLog ${APACHE_LOG_DIR}/error.log
    TransferLog ${APACHE_LOG_DIR}/access.log
    LogLevel warn

    SSLProtocol -all +TLSv1 +TLSv1.1 +TLSv1.2 +TLSv1.3

    SSLCipherSuite HIGH:!aNULL:!kRSA:!MD5:!RC4

    SSLCertificateFile /etc/ssl/private/cryptopp-com.cert.pem

    SSLCertificateKeyFile /etc/ssl/private/cryptopp-com.key.pem

    SSLCertificateChainFile /etc/ssl/private/cryptopp-com.chain.pem

    SSLVerifyClient none

  </VirtualHost>

Enable the site.

  # a2ensite cryptopp
  Enabling site cryptopp.

ssl.conf
========

cryptopp.conf provides our TLS configuration. Remove the sample
virtual host. Delete everything between <VirtualHost> and </VirtualHost>,
including the tags.

In the global area remaining in ssl.conf, add the following for OCSP stapling.
Add it after SSLSessionCache.

# OCSP Stapling
SSLUseStapling On
SSLStaplingCache shmcb:${APACHE_RUN_DIR}/ssl_stapling(8192)

.htaccess
=========

Ensure there is a Short URL rule for Mediawiki. This translates requests with
wiki/ in the URL to w/ on the filesystem. Also see
https://www.mediawiki.org/wiki/Manual:Short_URL

  $ cat /var/www/html/.htaccess

  RewriteEngine on
  RewriteRule ^wiki/?(.*)$ /w/index.php?title=$1 [L,QSA]

  <IfModule mod_deflate.c>
    <FilesMatch "\.(js|css|html)$">
      SetOutputFilter DEFLATE
    </FilesMatch>
  </IfModule>

Permissions
===========

Ownership of /var/html is root:www-data. Other has no access.

  chown -R root:www-data /var/www-data
  chmod -R o= /var/html

PHP has an upload directory at /var/lib/php/session, and a temp directory at
/var/lib/php/tmp. Apache needs write access.

  mkdir -p /var/lib/php/tmp
  chown -R www-data:www-data /var/lib/php
  chmod -R o= /var/lib/php

Apache Service
==============

Enable and start the Apache service via Systemd.

  systemctl enable apache2
  systemctl start apache2

Reboot the machine, and verify Apache is running:

  # systemctl status apache2
  ‚óè apache2.service - The Apache HTTP Server
     Loaded: loaded (/lib/systemd/system/apache2.service; enabled; vendor preset: enabled)
     Active: active (running) since Tue 2021-03-30 22:10:35 UTC; 2h 22min ago
     ...

Miscellaneous
=============

Finally, install Mediawiki software. Mediawiki installation is covered in
mediawiki/wiki-upgrade.txt.
