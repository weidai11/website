#!/usr/bin/env bash

# This script performs a backup of the webserver to Bitvise. The backup
# script depends upon /etc/cryptopp.conf for passwords and shared
# secrets.
#
# cryptopp.conf is not available in this GitHub because it holds passwords
# and shared secrets. You have to have a copy of it somewhere. It is one of
# those files that you should have an encrypted local copy somewhere, like
# on a local machine or in email.
#
# Also see https://github.com/weidai11/website/tree/master/systemd

# Systemd adds random paths at times. Take full control of PATH.
PATH=/bin:/sbin:/usr/bin:/usr/sbin
export PATH

# Determine if we need a full back. We do a full backup every three months.
day=$(date +%d)
if [ "${day}" = '01' ];
then
    month=$(date +%m)
    case ${month} in
        01|04|07|10)
          full_backup=full
          ;;
        *)
          ;;
    esac
fi

if [ -n "${full_backup}" ]; then
    echo "Performing a full backup"
fi

# Ensure the dump is properly protected
mkdir -p /backup
chmod u=rwx,g=rx,o= /backup

# Ensure conf file is properly protected
chown root:root /etc/cryptopp.conf
chmod u=r,go= /etc/cryptopp.conf

# Get passwords needed for this script
wiki_password=$(grep WIKI_PASSWORD /etc/cryptopp.conf | cut -f 2 -d '=')
gnupg_password=$(grep GNUPG_PASSWORD /etc/cryptopp.conf | cut -f 2 -d '=')
bitvise_password=$(grep BITVISE_PASSWORD /etc/cryptopp.conf | cut -f 2 -d '=')
bitvise_host=$(grep BITVISE_HOST /etc/cryptopp.conf | cut -f 2 -d '=')
bitvise_port=$(grep BITVISE_PORT /etc/cryptopp.conf | cut -f 2 -d '=')

if [[ -z "${wiki_password}" ]]; then
    echo "WARNING: wiki_password is empty"
fi
if [[ -z "${gnupg_password}" ]]; then
    echo "WARNING: gnupg_password is empty"
fi
if [[ -z "${bitvise_password}" ]]; then
    echo "WARNING: bitvise_password is empty"
fi
if [[ -z "${bitvise_host}" ]]; then
    echo "WARNING: bitvise_host is empty"
fi
if [[ -z "${bitvise_port}" ]]; then
    echo "WARNING: bitvise_port is empty"
fi

# Fix the wiki tables (just in case). This step produces a lot of noise, so send stdout to /dev/null.
if mysqlcheck my_wiki --auto-repair --user=mwuser --password="${wiki_password}" 1>/dev/null;
then
    echo "Repair wiki database ok"
else
    echo "Failed to repair wiki database"
    # exit 1
fi

# --no-tablespaces due to https://dba.stackexchange.com/q/271981
if mysqldump --single-transaction --no-tablespaces --routines --events --triggers --add-drop-table \
     --extended-insert -u mwuser -h 127.0.0.1 -p"${wiki_password}" my_wiki > /backup/wiki.sql ;
then
    echo "Dump wiki database ok"
else
    echo "Failed to dump wiki database"
    exit 1
fi

# The wiki.sql dump will be about 20MB. Check size against 1MB.
wiki_sql_size=$(wc -c /backup/wiki.sql | awk '{print $1}')
if [ ${wiki_sql_size} -lt 1048576 ]
then
    echo "Failed to dump wiki database. Database is too small."
    exit 1
fi

# And ensure the dump is readbale for backup.
chmod u=rw,g=r,o= /backup/wiki.sql

# PASSPHRASE is the GnuPG passphrase used by Duplicity.
# All backup jobs get PASSPHRASE. Restores need the PASSPHRASE.
export PASSPHRASE="${gnupg_password}"

exclude_opts=()
exclude_opts+=("--exclude /proc")
exclude_opts+=("--exclude /dev")
exclude_opts+=("--exclude /sys")
exclude_opts+=("--exclude /mnt")
exclude_opts+=("--exclude /tmp")
exclude_opts+=("--exclude /udev")
exclude_opts+=("--exclude /boot/grub")
exclude_opts+=("--exclude /etc/fstab")
exclude_opts+=("--exclude /var/lib")
exclude_opts+=("--exclude /lost+found")
exclude_opts+=("--exclude /root/.cache")
exclude_opts+=("--exclude /etc/sysconfig/network-scripts")

root_drive="/"

# This is the Bitvise backup.
if ! duplicity ${full_backup} --allow-source-mismatch ${exclude_opts[@]} ${root_drive} \
     "sftp://CryptoPPBackup:${bitvise_password}@${bitvise_host}:${bitvise_port}/cryptopp_com_backup" ;
then
    echo "Failed to backup VM to Bitvise"
    exit 1
fi

exit 0
