Installing a new version of Mediawiki sucks for a several reasons.
First, we have to disable some of our security hardening and re-enable
it later. Second, we have to install a bunch of developer tools and
then remove them. Third, Mediawiki uses bleeding edge components but
CentOS provides antique software.

The Crypto++ VM has some updated components from Red Hat SCL, like
an updated Apache, Python and PHP. Other components are not available
from the SCL, like an updated Composer.

You should set aside about 30 minutes to one hour for the migration.
The process itself is copy/paste and should take about 10 minutes
after the backup. The extra time is in case something goes sideways.

In the instructions below the Crypto++ Wiki is located at
/var/www/html/w. https://www.cryptopp.com/wiki works because
of an Apache mod-rewrite rule.

Step 1 - Get root
=================

1. sudo su -

Step 2 - Clear pending jobs
===========================

Some actions in the database are delayed. Run them now.

1. php /var/www/html/w/maintenance/runJobs.php

Step 3 - Incremental system backup
==================================

This step performs a system backup using duplicity. The backups
are usually incremental. Every three months a full backup is
performed. The incremental backup takes about 20 to 25 minutes.

1. /usr/sbin/bitvise-backup

Step 4 - Local backup of wiki only
==================================

Delete a previous local backup, if present. Make a local backup
for quick restoration, if needed.

Note: the backup is stored at /var/wiki-backup so /var/www/html
can be restored quickly without the need to restore a copy
using duplicity.

1. rm -rf /var/wiki-backup
2. cp -r /var/www/html/w /var/wiki-backup
3. chown root:root /var/wiki-backup

Do not skip the backup step. Later you will need LocalSettings.php
from the local backup.

Step 5 - Delete the Vendor directory
====================================

Delete the current vendor directory. It holds code and tools for
the previous version of the Mediawiki software. New versions will
be installed using Composer.

1. rm -rf /var/www/html/w/vendor/*

Step 6 - Install latest Mediawiki
=================================

Clear old artifacts:

1. rm -rf /tmp/mediawiki* /tmp/w/

Download the latest Mediawiki in tmp/:

2. cd /tmp
3. wget https://releases.wikimedia.org/mediawiki/1.35/mediawiki-1.35.2.tar.gz

Temporary unpack in tmp/:

4. tar -xzf mediawiki-1.35.2.tar.gz
5. mv mediawiki-1.35.2/ w

Test the copy to the filesystem:

6. rsync -avh --dry-run /tmp/w /var/www/html/

Perform the copy to the filesystem:

7. rsync -avh /tmp/w /var/www/html/

It is OK to delete the artifacts in /tmp:

8. rm -rf /tmp/mediawiki* /tmp/w/

Step 7 - Install Composer
=========================

# This gets an old Composer with dependencies.
# Red Hat SCL does not supply an updated composer.

1. yum -y install composer
2. hash -r
3. Copy the list of dependencies

Step (1) is dangerous. Composer is a developer tool that brings
in 30+ dependencies. Composer and friends require unsafe functions.
They must be removed after the Mediawiki upgrade.

Step 8 - Disable server hardening
=================================

Composer needs access to directories and functions we have disabled.
Temporarily re-enable them for Composer.

1. cp /etc/opt/rh/rh-php73/php.d/security.ini.weak /etc/opt/rh/rh-php73/php.d/security.ini

security.ini.weak allows:
   - open_basedir=<any>
   - allow_url_fopen=On
   - allow_url_include=On
   - disable_functions=<none>

Step (1) is dangerous. It allows many popular attack vectors.
This change must be undone after Composer has been run.

Step 9 - Update Mediawiki dependencies
======================================

Use Composer to update Mediawiki dependencies. This is needed
because the release tarball does not include them.

There is a composer --no-dev option that provides release tools
and avoids developer tools, but it does not seem to work with
our installation. I think composer is too old.

1. cd /var/www/html/w/
2. php -d extension=phar.so composer.phar update

Step (2) is dangerous. It runs Composer as root, and does not
disable plugins or scripts in the third-party projects. The
third-party projects effectively have full control over
the web server and virtual machine.

If you experience errors in vendor/ then revisit Step (5).
Step (5) deletes the old vendor/ directory in preparation
for the Composer updates.

Step 10 - Restore LocalSettings.php
===================================

The backup of LocalSettings.php is in /var/wiki-backup.

Make a backup of the new LocalSettings.php in case it is needed.

1. cp LocalSettings.php LocalSettings.php.orig
2. cp /var/wiki-backup/LocalSettings.php .

Note: Mediawiki does not provide a LocalSettings.php in the
tarball. You have to use the existing LocalSettings.php that
was backed up in Step 4.

Step 11 - Database maintenance
==============================

We are now at the point of no return. Prior to this point
we could copy the old wiki installation from /var/wiki-backup
and go back to the old version. At this step we burn that bridge.
Once the database is updated we are married to the new version
(unless you want to perform a restore using duplicity).

Next, cross your fingers:

1. php /var/www/html/w/maintenance/update.php --quick

If update.php succeeds, then the migration is mostly complete.

If update.php fails, then fix the errors until it succeeds. If it
still fails, then you have to go back to the old installation located
in /var/wiki-backup.

Step 12 - Update for new Mediawiki
==================================

update-wiki.sh is our tool to perform additional updates on the wiki.
Each time we run 'yum update' we also run update-wiki.sh.

update-wiki.sh updates extensions and skins on a regular basis. It
also fixes file permissions on files from the tarball, skins and
extensions. The file permissions are always screwed up, like PHP files
without the eXecute bit, and JPEG files with the eXecute bit.

update-wiki.sh is available in this GitHub repo.

1. Open update-wiki.sh
2. Change WIKI_REL=REL1_35 to appropriate version
3. Change PHP_BIN=/opt/rh/rh-php73/root/usr/bin/php as needed

And then:

4. bash /var/www/html/w/update-wiki.sh

update-wiki.sh also restarts MySQL and Apache.

At this point you should be able to test the installation by
visiting Special:Version wiki page:

5. https://www.cryptopp.com/wiki/Special:Version

Step 13 - Restore server hardening
==================================

1. cp /etc/opt/rh/rh-php73/php.d/security.ini.hard /etc/opt/rh/rh-php73/php.d/security.ini

security.ini.hard re-enables:
   - open_basedir="..."
   - allow_url_fopen=Off
   - allow_url_include=Off
   - disable_functions="apache_note ..."

Step 14 - Remove Composer
=========================

The list from Step (5) should be cribbed away. Here is the one
produced by CentOS 7 during install:

1. yum -y remove composer libicu libzip t1lib php-PsrLog php-cli \
   php-common php-composer-ca-bundle php-composer-semver \
   php-composer-spdx-licenses php-composer-xdebug-handler php-fedora-autoloader \
   php-gd php-intl php-jsonlint php-justinrainbow-json-schema5 php-mbstring \
   php-paragonie-random-compat php-password-compat php-pdo php-process \
   php-seld-phar-utils php-symfony-browser-kit php-symfony-class-loader \
   php-symfony-common php-symfony-config php-symfony-console \
   php-symfony-css-selector php-symfony-debug php-symfony-dependency-injection \
   php-symfony-dom-crawler php-symfony-event-dispatcher \
   php-symfony-expression-language php-symfony-filesystem php-symfony-finder \
   php-symfony-http-foundation php-symfony-http-kernel php-symfony-polyfill \
   php-symfony-process php-symfony-var-dumper php-symfony-yaml php-xml

2. hash -r

3. yum -y autoremove

Miscellaneous
=============

Note well: You may need to reinstall librsync-devel or python2-lockfile if
duplicity has a failure. 'yum -y autoremove' seems to remove it even though
it is needed by duplicity.
